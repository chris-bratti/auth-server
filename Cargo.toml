[package]
name = "auth-server"
version = "0.2.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
actix-files = { version = "0.6.6", optional = true }
actix-web = { version = "4.9.0", optional = true, features = ["macros", "openssl"] }
console_error_panic_hook = "0.1.7"
http = { version = "1.1.0", optional = true }
leptos = { version = "0.6.15", features = ["nightly"] }
leptos_meta = { version = "0.6.15", features = ["nightly"] }
leptos_actix = { version = "0.6.15", optional = true }
leptos_router = { version = "0.6.15", features = ["nightly"] }
wasm-bindgen = "=0.2.99"
actix-session = { version = "0.10.1", features = ["redis-session"], optional=true}
actix-identity = {version = "0.8.0", optional=true}
diesel = { version = "2.2.6", features = ["postgres", "r2d2"], optional=true}
dotenvy = { version = "0.15.7", optional = true }
true = { version = "0.1.0", optional = true }
serde = { version = "1.0.215", features = ["derive"] }
serde_json = "1.0.133"
cfg-if = "1.0.0"
argon2 = "0.5.3"
lazy_static = { version = "1.5.0", optional = true }
regex = { version = "1.11.1", optional = true }
chrono = "0.4.39"
rand = "0.8.5"
lettre ={version = "0.11.11", optional= true}
maud = {version = "0.26.0", optional=true}
aes-gcm = "0.10.3"
hex = "0.4.3"
totp-rs = { version = "5.6.0", features = ["qr"], optional = true }
tokio = { version = "1.41.1", features = ["full"], optional = true }
jsonwebtoken = {version = "9.3.0", optional = true }
env_logger = {version = "0.11.5"}
log = "0.4.22"
thiserror = {version = "2.0.7", optional = true}
redis = {version = "0.27.6", optional = true}
openssl = { version = "0.10", optional = true }
base64 = {version = "0.22.1", optional = true }
serial_test = {version = "3.2.0", optional = true}
r2d2 = {version = "0.8.10", optional = true}
futures-util = "0.3.31"
actix-cors = {version ="0.7.0", optional = true}
actix-web-httpauth = {version = "0.8.2", optional = true}
url = { version = "2.5.4", optional = true }
actix-rt = {version = "2.10.0", optional = true}

[features]
csr = ["leptos/csr", "leptos_meta/csr", "leptos_router/csr"]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate"]
ssr = [
  "dep:actix-files",
  "dep:actix-web",
  "dep:leptos_actix",
  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
  "dep:actix-session",
  "dep:actix-identity",
  "dep:diesel",
  "dep:dotenvy",
  "dep:lazy_static",
  "dep:regex",
  "dep:lettre",
  "dep:maud",
  "dep:totp-rs",
  "dep:tokio",
  "dep:jsonwebtoken",
  "dep:thiserror",
  "dep:redis",
  "dep:openssl",
  "dep:base64",
  "dep:serial_test",
  "dep:r2d2",
  "dep:actix-cors",
  "dep:actix-web-httpauth",
  "dep:url",
  "dep:actix-rt"
]
dotenvy = ["dep:dotenvy"]
true = ["dep:true"]
lazy_static = ["dep:lazy_static"]
regex = ["dep:regex"]
totp-rs = ["dep:totp-rs"]
tokio = ["dep:tokio"]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "auth_server"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"
# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "assets"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
